{"version":3,"sources":["../src/demo.js"],"names":["style","create","social","padding","SampleApp","value","location","type","content","rel","prId","url","id","substring","lastIndexOf","output","replace","startServer","html","createServer","request","response","writeHeader","write","end","listen","on","err","socket","console","log","rampt","ampValidations","template","head","title","canonical","renderStatic","then","catch","error"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;AAIA;;;;;;AAGoB;;AAEpB;AAXwB;;AAYxB,IAAMA,QAAQ,wBAAWC,MAAX,CAAkB;AAC5BC,YAAQ,EAACC,SAAS,MAAV;AADoB,CAAlB,CAAd;;AAIA;AAXiC;AAYjC,IAAMC,YAAY,SAAZA,SAAY,OAAwB;AAAA,QAArBC,KAAqB,QAArBA,KAAqB;AAAA,QAAdC,QAAc,QAAdA,QAAc;;AACtC;AACA,sBAAQ,CACJ,EAACC,MAAM,MAAP,EAAeC,SAAS,EAACA,SAAS,WAAV,EAAxB,EADI,EAEJ,EAACD,MAAM,MAAP,EAAeC,SAAS,EAACC,KAAK,aAAN,EAAxB,EAFI,CAAR;;AAKA,QAAMC,OAAO,OAAb,CAPsC,CAOjB;AACrB,QAAMC,MAAM,gCAAgCD,IAA5C,CAAiD,CARX,CAQa;AACnD,QAAME,KAAKD,IAAIE,SAAJ,CAAcF,IAAIG,WAAJ,CAAgB,GAAhB,IAAuB,CAArC,CAAX;AACA,QAAMC,SAASH,GAAGI,OAAH,CAAW,YAAX,EAAyB,EAAzB,CAAf;;AAEA,WACI;AAAA;AAAA;AACI;AAAA;AAAA;AAAA;AAAWX;AAAX,SADJ;AAEI,iDAFJ;AAGI;AAAA;AAAA;AAAKU,kBAAL;AAAA;AAAA,SAHJ;AAII,iDAJJ;AAKI;AAAA;AAAA;AAAI;AAAA;AAAA,kBAAG,WAAU,UAAb,EAAwB,MAAM,iCAAiCA,MAA/D,EAAuE,QAAO,QAA9E;AAAA;AAAA;AAAJ;AALJ,KADJ;AAUH,CAtBD;;AAyBA;;;AAIO,IAAME,oCAAc,SAAdA,WAAc,CAACC,IAAD,EAAU;AACjC,mBAAKC,YAAL,CAAkB,UAACC,OAAD,EAAUC,QAAV,EAAuB;AACrCA,iBAASC,WAAT,CAAqB,GAArB,EAA0B,EAAC,gBAAgB,WAAjB,EAA1B;AACAD,iBAASE,KAAT,CAAeL,IAAf;AACAG,iBAASG,GAAT;AACH,KAJD,EAKKC,MALL,CAKY,IALZ,EAMKC,EANL,CAMQ,aANR,EAMuB,UAACC,GAAD,EAAMC,MAAN,EAAiB;AAChCA,eAAOJ,GAAP,CAAW,kCAAX;AACH,KARL;AASAK,YAAQC,GAAR,CAAY,wBAAZ;AACH,CAXM;;AAcP,IAAMC,QAAQ,kBAAU;AACpBC,oBAAgB,IADI,EACE;AACtBC,cAAU;AACNC,cAAM;AACFC,mBAAO,kBADL;AAEFC,uBAAW;AAFT;AADA;AAFU,CAAV,CAAd;;AAUA;;;;;;AAMAL,MACKM,YADL,CACkB,8BAAC,SAAD,IAAW,OAAM,MAAjB,GADlB,EAEKC,IAFL,CAEUrB,WAFV,EAGKsB,KAHL,CAGWV,QAAQW,KAHnB","file":"demo.js","sourcesContent":["import http from 'http';\nimport React, { PropTypes } from 'react';\nimport $ from \"jquery\"; //Importing the Jquery\n\nimport {\n    StyleSheet,\n    css,\n} from 'aphrodite/no-important'; // Is very important to import no-important!\nimport RAMPT, {\n    addScript, // Fancy way to append amp-scripts into document's head\n    addMeta,\n} from '../../lib'; // react-amp-template\n\n// --- MODULAR-CSS ---\nconst style = StyleSheet.create({\n    social: {padding: '10px'},\n});\n\n// --- REACT + CUSTOM-TAGS ---\nconst SampleApp = ({ value, location}) => {\n    // --- CUSTOM-SCRIPTS ---\n    addMeta([\n        {type: 'meta', content: {content: 'something'}},\n        {type: 'link', content: {rel: 'http://link'}},\n    ]);\n\n    const prId = \"12512\" //We can make it dynamic\n    const url = \"http://localhost:8000/prId=\" + prId;; //window,location.href;\n    const id = url.substring(url.lastIndexOf('/') + 1);\n    const output = id.replace(/[a-zA-Z=]/g, '');\n\n    return (\n        <div>\n            <h1>Hello {value}</h1>\n            <hr />\n            <h2>{output} took from prId</h2>\n            <hr />\n            <h2><a className=\"redirect\" href={'//www.fitchratings.com/prId/' + output} target=\"_blank\">Click Here</a>\n            </h2>\n        </div>\n    );\n};\n\n\n//AJAX CALL --GET THE ID AND MAKE THE AJAX REQUEST-- GET AJAX CALL\n\n\n\nexport const startServer = (html) => {\n    http.createServer((request, response) => {\n        response.writeHeader(200, {'Content-Type': 'text/html'});\n        response.write(html);\n        response.end();\n    })\n        .listen(8000)\n        .on('clientError', (err, socket) => {\n            socket.end('HTTP/1.1 400 Bad Request\\r\\n\\r\\n');\n        });\n    console.log('Listening on port 8000');\n};\n\n\nconst rampt = new RAMPT({\n    ampValidations: true, // (default) validate the template with AMP Google tool.\n    template: {\n        head: {\n            title: 'react-amp-sample',\n            canonical: 'http://sample',\n        },\n    },\n})\n\n/**\n * renderStatic returns a promise which will be fulfilled\n * with a string that holds the whole HTML document ready to serve.\n * The promise will reject for any internal error.\n * Once done rendering, the promise's result will be served on port 8000.\n */\nrampt\n    .renderStatic(<SampleApp value=\"AMP!\"/>)\n    .then(startServer)\n    .catch(console.error);\n"]}