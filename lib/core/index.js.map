{"version":3,"sources":["../../src/core/index.js"],"names":["debug","require","DOMInjected","Core","options","settings","template","DOMPropertyConfig","JSON","stringify","injectDOMPropertyConfig","tags","renderStatic","renderToFile","component","renderToStaticMarkup","Promise","fulfill","reject","aphrodite","html","css","document","doctype","head","styles","content","scripts","metas","prettyPrint","ampValidations","then","catch","ampErrors","validation","markup","error","file","toRender","staticMarkup","writeFileSync"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;;;AACA,IAAMA,QAAQC,QAAQ,OAAR,EAAiB,YAAjB,CAAd;;AAEA,IAAIC,cAAc,KAAlB;AACA;;;;;;;;;IAQMC,I;AACJ,gBAAYC,OAAZ,EAAqB;AAAA;;AACnB,SAAKC,QAAL,oCAEKD,OAFL;AAGEE,6BACK,mBAASA,QADd,EAEKF,QAAQE,QAFb,CAHF;AAOEC,sCACK,mBAASA,iBADd,EAEKH,QAAQG,iBAFb;AAPF;AAYAP,UAAM,kBAAN,EAA0BQ,KAAKC,SAAL,CAAe,KAAKJ,QAApB,CAA1B;AACA,QAAI,CAACH,WAAL,EAAkB;AAChBF,YAAM,8BAAN;AACA,kCAAYU,uBAAZ,CAAoC,KAAKL,QAAL,CAAcE,iBAAlD;AACAL,oBAAc,IAAd;AACD,KAJD,MAIO;AACLF,YAAM,4CAAN;AACD;;AAED,SAAKW,IAAL,GAAY,mBAAS,KAAKN,QAAL,CAAcM,IAAvB,CAAZ;AACA,SAAKC,YAAL,GAAsB,KAAKA,YAA3B,MAAsB,IAAtB;AACA,SAAKC,YAAL,GAAsB,KAAKA,YAA3B,MAAsB,IAAtB;AACD;;AAED;;;;;;;;;;8BAMUC,S,EAAW;AACnBd,YAAM,oBAAN;AACA,aAAO,8BAAiBY,YAAjB,CAA8B;AAAA,eACnC,iBAAeG,oBAAf,CAAoCD,SAApC,CADmC;AAAA,OAA9B,CAAP;AAGD;;AAED;;;;;;;;;;;;iCASaA,S,EAAW;AAAA;;AAAA,UACdR,QADc,GACD,KAAKD,QADJ,CACdC,QADc;;AAEtB,aAAO,IAAIU,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAI;AAAA,2BACoB,MAAKC,SAAL,CAAeL,SAAf,CADpB;AAAA,cACMM,IADN,cACMA,IADN;AAAA,cACYC,GADZ,cACYA,GADZ;;AAEFrB,gBAAM,2BAAN;;AAEA,cAAIsB,WAAWhB,SAASiB,OAAT,GACb,iBAAeR,oBAAf,CACE;AACE,kBAAMT,SAASc,IADjB;AAEE,+BACKd,SAASkB,IADd;AAEEC,sBAAQJ,IAAIK,OAFd;AAGEC,uBAAS,uBAHX;AAIEC,qBAAO;AAJT,cAFF;AAQE,kBAAMR;AARR,YADF,CADF;;AAcA,cAAId,SAASuB,WAAb,EAA0B;AACxBP,uBAAW,uBAAYA,QAAZ,CAAX;AACD;;AAED,cAAI,MAAKjB,QAAL,CAAcyB,cAAlB,EAAkC;AAChC9B,kBAAM,4BAAN;AACA,mBAAO,kCAAesB,QAAf,EACJS,IADI,CACCd,OADD,EAEJe,KAFI,CAEE,UAACC,SAAD,EAAe;AACpBf,qBAAO,EAAEgB,YAAYD,SAAd,EAAyBE,QAAQb,QAAjC,EAAP;AACD,aAJI,CAAP;AAKD;AACD,iBAAOL,QAAQK,QAAR,CAAP;AACD,SA/BD,CA+BE,OAAOc,KAAP,EAAc;AACd,iBAAOlB,OAAO;AACZiB,oBAAQC;AADI,WAAP,CAAP;AAGD;AACF,OArCM,CAAP;AAsCD;;AAED;;;;;;;;;;;iCAQaC,I,EAAmB;AAAA,wCAAVC,QAAU;AAAVA,gBAAU;AAAA;;AAC9B,aAAO,KAAK1B,YAAL,aAAqB0B,QAArB,EACNP,IADM,CACD,UAACQ,YAAD,EAAkB;AACtBvC,cAAM,wBAAN,EAAgCqC,IAAhC;AACA,qBAAGG,aAAH,CAAiBH,IAAjB,EAAuBE,YAAvB;AACA,eAAOA,YAAP;AACD,OALM,CAAP;AAMD;;;;;;kBAGYpC,I","file":"index.js","sourcesContent":["import fs from 'fs'\nimport React from 'react'\nimport ReactDOMServer from 'react-dom/server'\nimport { DOMProperty } from 'react-dom/lib/ReactInjection'\nimport { StyleSheetServer } from 'aphrodite/no-important'\nimport { prettyPrint } from 'html'\nimport { validateMarkup } from '../utils/ampvalidator'\nimport Tags, { getMetas, getScripts } from './Tags'\nimport Template from '../components/Template'\nimport DEFAULTS from './defaults'\nconst debug = require('debug')('rampt:core')\n\nlet DOMInjected = false\n/**\n * A class that manages ReactDOMServer & ModularCSS to\n * transpile ReactElements into a single valid AMP HTML document.\n * @param {Object} options - its defaults is a set of DOMProperty needed to\n * prevent React in ignore AMP's attrs and custom-elements.\n * @export\n * @constructor\n */\nclass Core {\n  constructor(options) {\n    this.settings = {\n      ...DEFAULTS,\n      ...options,\n      template: {\n        ...DEFAULTS.template,\n        ...options.template,\n      },\n      DOMPropertyConfig: {\n        ...DEFAULTS.DOMPropertyConfig,\n        ...options.DOMPropertyConfig,\n      },\n    }\n    debug('RAMPT settings: ', JSON.stringify(this.settings))\n    if (!DOMInjected) {\n      debug('Injecting AMP DOMProperties.')\n      DOMProperty.injectDOMPropertyConfig(this.settings.DOMPropertyConfig)\n      DOMInjected = true\n    } else {\n      debug('Custom DOMProperties were injected already')\n    }\n\n    this.tags = new Tags(this.settings.tags)\n    this.renderStatic = ::this.renderStatic\n    this.renderToFile = ::this.renderToFile\n  }\n\n  /**\n   * Aphrodite's css server-side rendering\n   * 'https://github.com/Khan/aphrodite'\n   * @param {ReactElement} component\n   * @returns {Object} - { css, html }\n   */\n  aphrodite(component) {\n    debug('Running aphrodite.')\n    return StyleSheetServer.renderStatic(() =>\n      ReactDOMServer.renderToStaticMarkup(component)\n    )\n  }\n\n  /**\n   * Creates a Promise and fulfills it with the given component rendered into a\n   * a valid AMP HTML document reduced to a single string.\n   * The component is allowed to contain childrens with custom AMP elements.\n   * @param {ReactElement} component - The component root to render into body.\n   * @param {Object} config - required and contains few optional\n   * parameters for AMP template.\n   * @returns {Promise[string]} - String that contains the static markup\n   */\n  renderStatic(component) {\n    const { template } = this.settings\n    return new Promise((fulfill, reject) => {\n      try {\n        const { html, css } = this.aphrodite(component)\n        debug('Executing reactDOMServer.')\n\n        let document = template.doctype +\n          ReactDOMServer.renderToStaticMarkup(\n            <Template\n              html={template.html}\n              head={{\n                ...template.head,\n                styles: css.content,\n                scripts: getScripts(),\n                metas: getMetas(),\n              }}\n              body={html}\n            />\n          )\n\n        if (template.prettyPrint) {\n          document = prettyPrint(document)\n        }\n\n        if (this.settings.ampValidations) {\n          debug('AMP validation is enabled.')\n          return validateMarkup(document)\n            .then(fulfill)\n            .catch((ampErrors) => {\n              reject({ validation: ampErrors, markup: document })\n            })\n        }\n        return fulfill(document)\n      } catch (error) {\n        return reject({\n          markup: error,\n        })\n      }\n    })\n  }\n\n  /**\n  * Calls for render and writes the content into disc.\n  * @param {String} output path.\n  * @param {ReactElement} component - The component root to render into body.\n  * @param {Object} config - required and contains few optional\n  * parameters for AMP template.\n  * @returns {Promise}\n  */\n  renderToFile(file, ...toRender) {\n    return this.renderStatic(...toRender)\n    .then((staticMarkup) => {\n      debug('Rendering to file --> ', file)\n      fs.writeFileSync(file, staticMarkup)\n      return staticMarkup\n    })\n  }\n}\n\nexport default Core\n"]}